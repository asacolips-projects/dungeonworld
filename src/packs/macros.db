{"_id":"4SgnMHbrYhTtezPK","name":"Set Tokens Bars","permission":{"default":0,"1naqx1UoDKZUy10j":3},"type":"script","flags":{"core":{"sourceId":"Macro.NVHXP3rgo2aSvY58"}},"scope":"global","command":"/*\nFeatures\n- Set HP Bar\n- Always display name and hp\n- Set to disposition Friendly\n- Link actor\n- Set dim vision to 20.\n*/\n\nconst tokens = canvas.tokens.placeables.filter((t) => t.actor._data.type === \"character\").map(token => {\n  return {\n    _id: token.id,\n    \"bar1.attribute\": \"attributes.hp\",\n    //\"bar2.attribute\": \"attributes.ac.value\", for xp when\n    \"displayName\": CONST.TOKEN_DISPLAY_MODES.ALWAYS,\n    \"displayBars\": CONST.TOKEN_DISPLAY_MODES.ALWAYS,\n    \"disposition\": 1,\n    \"actorLink\": true,\n    \"vision\": true,\n    \"dimSight\": 20 \n  };\n});\n\ncanvas.scene.updateEmbeddedEntity('Token', tokens);","author":"1naqx1UoDKZUy10j","img":"systems/dungeonworld/assets/icons/macros/Token%20Names%20and%20Bars.svg","actorIds":[]}
{"_id":"LLyVgwxC4J4p8N7S","name":"Open GM Screen","permission":{"default":0,"1naqx1UoDKZUy10j":3},"type":"script","flags":{"core":{"sourceId":"Macro.hDvKOW2WrNcTyd69"}},"scope":"global","command":"/*\nsource: \nicon:\n*/\n(async () => {\n  let list_compendium = await game.packs.filter(p=>p.entity=='JournalEntry' );\n  let inside = await list_compendium.filter( p=>p.metadata.label=='GM Screen' )[0].getContent();\n  let journal = await inside.filter( p=>p._data['name']=='!GM Screen' )[0];\n\n  if (journal.sheet.rendered)  \n    journal.sheet.close(); \n  else \n    journal.sheet.render(true);\n  \n})()","author":"1naqx1UoDKZUy10j","img":"systems/dungeonworld/assets/icons/macros/gmscreen.svg","actorIds":[]}
{"_id":"SxPHbmLQbNyfr1Mi","name":"EXP Manager","permission":{"default":0,"1naqx1UoDKZUy10j":3},"type":"script","flags":{"core":{"sourceId":"Macro.lHe1j5LDH9bWqZ2r"}},"scope":"global","command":"const macroVersion = 'v0.4.0';\n/* EXP Manager\n## Features\n- Select a token and it'll be selected in the combo\n- Choose the amount of experience to give or to remove.\n- Send XP for everyone\n- Warn about level available\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Dungeon%20World/EXP%20Manager.js\nicon: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Dungeon%20World/EXP%20Manager.svg\n*/\n\nmain();\n\nfunction main() {\n  let playersNames = game.actors.entities.filter((t) => t.data.type === \"character\").map((p=> p.data.name)); \n  let playerNameList;\n  let currentHeroPointsList = '';\n  let playerSelected;\n  if (actor) {   /* get selected token */\n    playerSelected = canvas.tokens.controlled[0].actor.name;        \n    playerNameList = `<option value=\"everyone\">Everyone</option>`;  \n  } else {\n    playerNameList = `<option value=\"everyone\" selected>Everyone</option>`;  \n  }    \n  playersNames.map((el) => {      \n    if (el===playerSelected) {\n      playerNameList += `<option value=\"${el}\" selected>${el}</option>`;\n    } else {\n      playerNameList += `<option value=\"${el}\">${el}</option>`;      \n    }    \n  });\n  \n  /* Show actual xp points*/\n  let currentHeroPoints = checkHeroExp();\n  for (let i = 0; i < currentHeroPoints.length; i++) {\n    let levelAvailable='';\n    if ( parseInt(currentHeroPoints[i][1])>=(parseInt(currentHeroPoints[i][2])+7) ) {\n      levelAvailable = ' <b style=\"color:red\">(level available)</b>'; \n    }\n    currentHeroPointsList += '<li>' + currentHeroPoints[i][0] + ' - LV:' + currentHeroPoints[i][2]+ ' - XP:' + currentHeroPoints[i][1] + levelAvailable+ '</li>';    \n  }  \n  \n  let template = `\n  <h2>Choose</h2>\n  <p><b>Hero:</b> <select id=\"playerName\" style=\"width: 200px\">${playerNameList}</select></p>\n  <p>\n    <b>How much points do you want to give?</b> <input id=\"heroPoints\" type=\"number\" min=\"-10\" max=\"10\" style=\"width: 80px; box-sizing: border-box;border: none;background-color: #2d3748;color: white; text-align: center; \" value=1>\n  </p>    \n  <h2>Current Experience Points</h2>\n  <ul>\n    ${currentHeroPointsList}\n  </ul>\n  `;\n  \n  new Dialog({\n    title: `Experience Manager - ${macroVersion}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Apply\",\n        callback: async (html) => {\n          expmanager(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\nasync function expmanager(html){\n  let playerName = html.find(\"#playerName\")[0].value;\n  let heroPoints = html.find(\"#heroPoints\")[0].value;  \n  if (playerName=='everyone') {    \n    updateAllHerosXP(heroPoints);\n  } else { \n    updateHeroPoints(playerName, heroPoints);\n  }\n}\n\nasync function updateHeroPoints(playerName, heroPoints) {\n  let character = game.actors.entities.filter((t) => t.data.type === \"character\").filter((v) => v.data.name === playerName)[0];\n  let currentHeroPoints = parseInt( character.data.data.attributes.xp.value);\n  let total = currentHeroPoints + parseInt( heroPoints );\n  await character.update({['data.attributes.xp.value']: total});\n  expMessage(character, heroPoints);\n}\n\nfunction updateAllHerosXP(heroPoints) {\n  let players = game.actors.entities.filter((t) => t.data.type === \"character\");\n  /*players.map((player) => {\n    let currentHeroPoints = parseInt( player.data.data.attributes.xp.value);\n    let total = currentHeroPoints + parseInt( heroPoints );\n    player.update({['data.attributes.xp.value']: total});\n    expMessage(player, heroPoints);\n  });*/\n  \n  players.map(async player => {    \n    let currentHeroPoints = parseInt( player.data.data.attributes.xp.value);\n    let total = currentHeroPoints + parseInt( heroPoints );\n    await player.update({['data.attributes.xp.value']: total});\n    expMessage(player, heroPoints);  \n  });\n}\n\nfunction checkHeroExp() {\n  let heros = [];\n  let characters = game.actors.entities.filter((t) => t.data.type === \"character\");\n  characters.forEach( (c) => {\n    //console.log(c.data.name + '/ ' + c.data.data.attributes.heroPoints.rank);    \n    heros.push([c.data.name, c.data.data.attributes.xp.value, c.data.data.attributes.level.value]);\n  }); \n  return heros;\n}\n\nfunction expMessage(player, points) {\n  let message = `<h2>${player.data.name}</h2>`;  \n  message += `<p>received <b>${points}</b> of experience.</p>`;  \n  if ( parseInt(player.data.data.attributes.xp.value)>=(parseInt(player.data.data.attributes.level.value)+7) ) {\n    message += '<p><b style=\"color:red\">Level Available!</b></p>';\n  }    \n  let chatData = {\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message\n  };  \n  ChatMessage.create(chatData, {});\n}","author":"1naqx1UoDKZUy10j","img":"systems/dungeonworld/assets/icons/macros/EXP%20Manager.svg","actorIds":[]}
{"name":"Treasure","permission":{"default":0,"1naqx1UoDKZUy10j":3},"type":"script","flags":{"core":{"sourceId":"Macro.Fa35jv4XKtZl0LjC"}},"scope":"global","command":"const macroVersion = 'v0.2';\n/* Treasure\nFeatures\n- Choose damage and monster type to roll the table\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Dungeon%20World/Treasure.js\nicon: icons/containers/chest/chest-simple-walnut.webp\n*/\n\n(async () => { \n  let monsterType = [\n  'Hoarder', 'Far from home', 'Magical', 'Divine', 'Planar', 'Lord over others', 'Ancient and noteworthy' \n  ].sort();\n  let monsterTypeList = ``;\n  let tmp;\n  monsterType.map((el) => {  \n    tmp = el.split(' ').join('').toLowerCase();      \n    monsterTypeList+=`<li class=\"meuitem\"><input type=\"checkbox\" id=\"${tmp}\"><label for=\"${tmp}\">${el}</label></li>`;    \n  });\n  \n  let template = `\n  <style>  \n  #dungeonworldmacrocss header {\n    background: #060f52;\n    border-radius: 0;    \n    border: none;    \n    margin-bottom: 2px;\n    font-size: .75rem;\n  }\n  #dungeonworldmacrocss form {\n    margin-bottom: 30px;   \n  }\n  #dungeonworldmacrocss .window-content {    \n       \n  }  \n  #dungeonworldmacrocss .form-fields.buttons {\n    justify-content: flex-start !important;\n  }\n  #dungeonworldmacrocss .button {\n    height: 35px;\n    box-shadow: inset 0 0 0 1px #1111FF,inset 0 0 0 1.5px var(--tertiary),inset 0 0 0 1px #1111FF;\n    font-size: 12px;\n    padding: 0;\n    background: #eb34b7;\n    color: white;\n    cursor: pointer;\n  }\n  #dungeonworldmacrocss .button:hover {\n    box-shadow: 0 0 4px red;\n  }\n  #dungeonworldmacrocss .meuitem input[type=\"radio\"] {\n    opacity: 0;\n    position: fixed;\n    width: 0;  \n  }\n  #dungeonworldmacrocss .minhalista {    \n    display: inline-block;\n    list-style-type: none; \n    text-align: left; \n    margin: 0; \n    padding: 0; \n    width: 100%;\n  }\n  #dungeonworldmacrocss .meuitem {    \n    display: inline-block;    \n    padding: 2px; \n  }  \n  #dungeonworldmacrocss .meuitem label {    \n    cursor: pointer;    \n    margin: 0px 3px ;\n    \n    height: 100%;\n    width: 100%;\n    border-radius: 3px;\n    font-size: 16px;\n    font-family: \"Signika\", sans-serif;  \n    background: #060f52;        \n    color: white;    \n  }\n  \n  #dungeonworldmacrocss .checkbox label i {\n    margin-right: 5px;\n    color: white;\n    background: #6d729c;\n  }\n  #dungeonworldmacrocss .meuitem label:hover {\n    box-shadow: 0 0 14px black;\n  }\n  #dungeonworldmacrocss .meuitem input[type=\"checkbox\"]:selected + label {\n    background: rgba(0, 0, 150, 0.7);\n  }\n  #dungeonworldmacrocss .dialog-button {\n    height: 50px;\n    background: #060f52;\n    color: white;\n    justify-content: space-evenly;\n    align-items: center;\n    cursor: pointer;\n  }    \n  </style>\n  \n  <h2>Choose</h2>\n\n<table>\n  <tr>\n    <td><b style=\"color:red\">Damage Die:</b> <input id=\"damageDiceID\" type=\"text\" style=\"width: 90px; box-sizing: border-box;border: none;background-color: #2d3748;color: white; text-align: center;\" value=\"1d6\"></td>\n    <td><b style=\"color:red\">Damage Bonus: </b> <input id=\"damageBonusID\" type=\"number\" min=\"-10\" max=\"10\" style=\"width: 70px; box-sizing: border-box;border: none;background-color: #2d3748;color: white; text-align: center;\" value=0></td>    \n  </tr>\n<table>\n  \n  \n  \n  <h2>Monster Type</h2>\n    <div class=\"form-fields\">\n\n    <ul class=\"minhalista\">\n      ${monsterTypeList}    \n    </ul>\n  </div>\n  </br>\n  `;\n  \n  new Dialog({\n    title: `Treasure - ${macroVersion}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Roll\",\n        callback: async (html) => {\n          treasureRoller(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      },\n    },\n    default: \"ok\"    \n  }, { id: 'dungeonworldmacrocss'}).render(true);\n})()\n\nasync function treasureRoller(html){\n  let damageDice = html.find(\"#damageDiceID\")[0].value;\n  let damageBonus = html.find(\"#damageBonusID\")[0].value;\n  \n  let hoarder = html.find(\"#hoarder\")[0].checked;  \n  let farfromhome = html.find(\"#farfromhome\")[0].checked;\n  let magical = html.find(\"#magical\")[0].checked;\n  let divine = html.find(\"#divine\")[0].checked;\n  let planar = html.find(\"#planar\")[0].checked;\n  let lordoverothers = html.find(\"#lordoverothers\")[0].checked;\n  let ancientandnoteworthy = html.find(\"#ancientandnoteworthy\")[0].checked; \n  \n  const options = {'hoarder':hoarder, 'farfromhome': farfromhome, 'magical': magical, 'divine': divine, 'planar': planar, 'lordoverothers': lordoverothers, 'ancientandnoteworthy': ancientandnoteworthy  }; \n  \n  let result = rollDamage(damageDice, damageBonus, options);\n  \n  rollTreasureTable( result, options );\n}\n\n\n/* Functions */\nfunction rollDamage(damageDice, damageBonus, options) {\n  let result;\n  let dicePart1 = damageDice.match(/\\d+/g)[0];\n  let dicePart2 = damageDice.match(/\\d+/g)[1];\n  let newDice = damageDice;\n  let extraDice='';\n  \n  if ( options['hoarder'] ) {\n    newDice = parseInt( damageDice.match(/\\d+/g)[0] ) * 2 + 'd' + damageDice.match(/\\d+/g)[1] + 'kh';    \n  }\n  if ( options['lordoverothers'] ) {\n    extraDice += '+1d4';    \n  }\n  if ( options['ancientandnoteworthy'] ) {\n    extraDice += '+1d4';    \n  }\n  \n  result = new Roll(newDice + '+' + damageBonus + extraDice).roll().total;\n  \n  if (isNaN(result)) {\n    result = -1;\n  } else if (result<1) {\n    result = 1;\n  } else if (result>18) {\n    result = 18;\n  } else {\n    result = result-1;\n  }\n  return result;  \n}\n\nfunction rollTreasureTable(result, options) { \n  let treasureTb = [\n`A few coins, 2d8 [<b style=\"color:red\">${autoRoll('2d8')}</b>] or so`,\n  `An item useful to the current situation`,\n  `Several coins, about 4d10 [<b style=\"color:red\">${autoRoll('4d10')}</b>]`,\n  `A small item (gem, art) of considerable value, worth as much as 2d10×10 coins [<b style=\"color:red\">${autoRoll('2d10*10')}</b>], 0 weight`,\n  `Some minor magical trinket`,\n  `Useful information (in the form of clues, notes, etc.)`,\n  `A bag of coins, 1d4×100 [<b style=\"color:red\">${autoRoll('1d4*100')}</b>] or thereabouts. 1 weight per 100.`,\n  `A very valuable small item (gem, art) worth 2d6×100 [<b style=\"color:red\">${autoRoll('2d6*100')}</b>], 0 weight`,\n  `A chest of coins and other small valuables. 1 weight but worth 3d6×100 coins [<b style=\"color:red\">${autoRoll('3d6*100')}</b>].`,\n  `A magical item or magical effect`,\n  `Many bags of coins for a total of 2d4×100 [<b style=\"color:red\">${autoRoll('2d4*100')}</b>] or so`,\n  `A sign of office (crown, banner) worth at least 3d4×100 coins [<b style=\"color:red\">${autoRoll('3d4*100')}</b>]`,\n  `A large art item worth 4d4×100 coins [<b style=\"color:red\">${autoRoll('4d4*100')}</b>], 1 weight`,\n  `A unique item worth at least 5d4×100 coins [<b style=\"color:red\">${autoRoll('5d4*100')}</b>]`,\n  `All the information needed to learn a new spell and <b>roll again</b>`,\n  `A portal or secret path (or directions to one) and <b>roll again</b>`,\n  `Something relating to one of the characters and <b>roll again</b>`,\n  `A hoard: 1d10×1000 coins [<b style=\"color:red\">${autoRoll('1d10*100')}</b>] and 1d10×10 [<b style=\"color:red\">${autoRoll('1d10*10')}</b>] gems worth 2d6×100 [<b style=\"color:red\">${autoRoll('2d6*100')}</b>] each`\n  ];\n  \n  let message = `\n  <h2>Treasure</h2>\n  <div>\n    <img style=\"vertical-align:middle\" src=\"icons/containers/chest/chest-simple-walnut.webp\" width=\"32\" height=\"32\">  \n    <span>${treasureTb[result]}</span>    \n  </div>      \n  `;  \n\n  if ( options['farfromhome'] ) {\n    message+= `<p><b>Far from home:</b> add at least one ration (usable by anyone with similar taste<p>`;\n  }\n  if ( options['magical'] ) {\n    message+= `<p><b>Magical:</b> some strange item, possibly magical<p>`;\n  }\n  if ( options['divine'] ) {\n    message+= `<p><b>Divine:</b> a sign of a deity (or deities)<p>`;\n  }\n  if ( options['magical'] ) {\n    message+= `<p><b>Planar:</b> something not of this earth<p>`;\n  }\n\n  let chatData = {\n    user: game.user._id,    \n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n  ChatMessage.create(chatData, {});  \n}\n\nfunction autoRoll(diceToRoll) {\n return new Roll(diceToRoll).roll().total; \n}","author":"1naqx1UoDKZUy10j","img":"icons/containers/chest/chest-simple-walnut.webp","actorIds":[],"_id":"Txlcpk4Tkp5N3Yfc"}
{"_id":"cYhnspF8VfgJcmdU","name":"Instant NPC","permission":{"default":0,"5hdpeVem2o3qctWI":3},"type":"script","flags":{"core":{"sourceId":"Macro.IR2qG08BAoqxPLh3"}},"scope":"global","command":"/* Instant NPC - v1.4\nSource: https://github.com/brunocalado/mestre-digital/tree/master/Foundry%20VTT/Macros/Dungeon%20World\nIcon: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Dungeon%20World/Instant%20NPC.svg\nIcon2: icons/environment/people/commoner.webp\n*/\n\n(async () => {\n  const NPCName = await drawFromTable('Names');\n  const NPCKnack = await drawFromTable('Knacks');\n  const NPCInstinct = await drawFromTable('Instincts');  \n  const damageDieRolado = damageDie();\n  const randomArmorRolado = randomArmor();\n  \n  \n  let msg = `<h3>Personality</h3>`;\n  msg += `<p><b>Instinct:</b> ${NPCInstinct}</p>`;\n  msg += `<p><b>Knack:</b> ${NPCKnack}</p>`;\n  msg += `<h3>Treasure</h3>`;\n  msg += `<p>${treasureCoins(1,10)} coins.</p>`;\n  let message;\n  let npchp = randomHP(4,10);\n    \n  message = `<h2><b style=\"color: red\">${NPCName}</b></h2>`;    \n  message+=`<p><b>Damage Die:</b> ${damageDieRolado}</p>`;\n  message+=`<p><b>Armor:</b> ${randomArmorRolado}</p>`;\n  message+=msg;\n\n  addEventListenerOnHtmlElement(\"#createNPC\", 'click', (e) => {    \n    createRandomNPC({\n    name: NPCName,\n    type: \"npc\",\n    img: \"\",    \n    sort: 12000,\n    data: {},\n    token: {},\n    items: [],\n    flags: {},\n    data: {\n      details: {\n        biography: msg\n      },\n      attributes: {\n        damage: {\n          value: damageDieRolado\n        },\n        ac: {\n          value: randomArmorRolado\n        },\n        hp: {\n          max: npchp,\n          value: npchp\n        }           \n      }      \n    }\n    });    \n  });          \n  \n  message+=`<button style=\"background:#d10000;color:white\" id=\"createNPC\">Create NPC</button>`;\n  \n  let chatData = {\n    user: game.user._id,    \n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n  ChatMessage.create(chatData, {});  \n\n})()\n\n/* Functions */\nasync function drawFromTable(tableName) {\n\n  let list_compendium = await game.packs.filter(p=>p.entity=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label=='Tables' )[0].getContent();      \n  const table = await inside.filter( p=>p._data['name']==tableName )[0];          \n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  return await table.roll().results[0].text;  \n}\n\nfunction treasureCoins(min, max) {\n  return Math.floor(Math.random() * (max - min) ) + min;  \n}\n\nfunction damageDie() {\n  const dice = ['d4', 'd6', 'd8', 'd10', 'd12'];\n  return dice[ Math.floor(Math.random() * (5 - 0) ) + 0 ];\n}\n\nfunction randomArmor() {\n  return Math.floor(Math.random() * (3 - 0) ) + 0;\n}\n\nfunction randomHP(min, max) {\n  return Math.floor(Math.random() * (max - min) ) + min;  \n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { // Use Hook to add event to chat message html element\n        html[0].querySelector(element).addEventListener(event, func);        \n    });\n} // end addEventListenerOnHtmlElement\n\nasync function createRandomNPC(data) {  \n  const instantNPC = await Actor.create(data);\n  await instantNPC.sheet.render(true);    \n}","author":"5hdpeVem2o3qctWI","img":"icons/environment/people/commoner.webp","actorIds":[]}
{"name":"Attack Assistant","permission":{"default":0,"LS4QiTGkDELU8aif":3},"type":"script","flags":{"core":{"sourceId":"Macro.ySbbEBYoZ0et6PYn"}},"scope":"global","command":"const macroVersion = 'v0.6.3';\n/* Attack Assistant\nFeatures\n- Rolls damage if success. Offers Expose Yourself Damage in the chat.\n- Check for Precise Tag. Uses DEX instead of STR if it is present.\n- Check for Damage Tag. Adds the number of it to the weapon damage.\n- Change Default Attribute for the move.\nClass Features - Detects class features for attack\n- Backstab, Herculean Appetites\nSource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Dungeon%20World/Attack%20Assistant.js\nIcon: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Dungeon%20World/Attack%20Assistant.svg\n*/\n//\n\nif (!actor) {\n  ui.notifications.warn(`Select a token!`); // get selected token \n} else {\n  main();\n}\n\nfunction main() {\n  let weapons = canvas.tokens.controlled[0].actor.items.filter(el => el.data.type == \"equipment\").filter(el => el.data.data.itemType == \"weapon\");  \n  let weaponsOptions = \"\"; //Display the Chat Card for the selected item\n  for (let wep of weapons) {\n    weaponsOptions += `<option value=${wep.id}>${wep.data.name}`\n  }\n  //  Classes  \n  let extraOptions = \"\"; //Display the Chat Card for the selected item\n  for (let opt of moveSearch(\"Backstab\") ) {\n    extraOptions += `<li style=\"display: inline-block;\"><input type=\"checkbox\" id=\"${opt.data.name}\"/>${opt.data.name}</li>`;\n  }\n  for (let opt of moveSearch(\"Herculean Appetites\") ) {\n    extraOptions += `<li style=\"display: inline-block;\"><input type=\"checkbox\" id=\"${opt.data.name.replace(/\\s/g, '')}\"/>${opt.data.name}</li>`;\n  }\n\n  let dialogTemplate = `\n  <h1>Select Weapon</h1>\n  <p style=\"text-align:center; vertical-align:center\"><select id=\"selectedweapon\" style=\" width:250px;\">${weaponsOptions}</select></p>\n  <h2>Modifiers</h2>  \n  <table>\n    <tr>\n    <td style=\"text-align:center; vertical-align:center\"><b>Move:</b> <input id=\"move_mod\" type=\"number\" min=\"-10\" max=\"10\" style=\"width: 80px\" value=0></td>\n    <td style=\"text-align:center; vertical-align:center\"><b>Damage:</b> <input id=\"damage_mod\" type=\"number\" min=\"-10\" max=\"10\" style=\"width: 80px\" value=0></td>\n    </tr>\n  </table>  \n  \n  <h2>Options</h2>  \n  <ul style=\"display: inline-block; list-style-type: none;  list-style-type: none; text-align: left; margin: 0; padding: 0;\">\n    ${extraOptions}\n  </ul>\n\n  </br>\n  <h2>Change Move Attribute</h2>\n  <table>\n    <tr>\n    <td></td>\n    <td style=\"text-align:center; vertical-align:center\"><input type=\"radio\" id=\"attribute\" name=\"attribute\" value=\"Default\" checked=\"checked\" />Default</td>    \n    <td></td>\n    </tr>\n    <tr>\n      <td style=\"text-align:center; vertical-align:center\"><input type=\"radio\" id=\"attribute\" name=\"attribute\" value=\"Strength\" />Strength</td>\n      <td style=\"text-align:center; vertical-align:center\"><input type=\"radio\" id=\"attribute\" name=\"attribute\" value=\"Dexterity\"/>Dexterity</td>      \n      <td style=\"text-align:center; vertical-align:center\"><input type=\"radio\" id=\"attribute\" name=\"attribute\" value=\"Constitution\"/>Constitution</td>            \n    </tr>\n    <tr>    \n      <td style=\"text-align:center; vertical-align:center\"><input type=\"radio\" id=\"attribute\" name=\"attribute\" value=\"Intelligence\"/>Intelligence</td>      \n      <td style=\"text-align:center; vertical-align:center\"><input type=\"radio\" id=\"attribute\" name=\"attribute\" value=\"Wisdom\"/>Wisdom</td>      \n      <td style=\"text-align:center; vertical-align:center\"><input type=\"radio\" id=\"attribute\" name=\"attribute\" value=\"Charisma\"/>Charisma</td>          \n    </tr>    \n  </table>  \n  `;\n\n\n  new Dialog({\n    title: `Attack Assistant - ${macroVersion}`,\n    content: dialogTemplate,\n    buttons: {\n      Attack: {\n        label: \"Attack\",\n        callback: async (html) => {\n          rollDamage(html);\n        }\n      },\n      Cancel: {\n        label: \"Cancel\"\n      }\n    }\n  }).render(true);\n}\n\n// ==============================\n// Main\n// ==============================\nasync function rollDamage(html) {\n  // form data\n  let dice;\n  let weapon = canvas.tokens.controlled[0].actor.items.filter(el => el.data._id == html.find(\"#selectedweapon\")[0].value )[0];  \n  \n  let attributeChange = html.find('input[name=\"attribute\"]:checked').val();  \n  let move_mod = html.find(\"#move_mod\")[0].value;\n  let damage_mod = html.find(\"#damage_mod\")[0].value; \n  // Classes\n  let backstab = optionExist( html.find( \"#Backstab\" )[0] );\n  let herculeanAppetites = optionExist( html.find( \"#HerculeanAppetites\" )[0] );\n \n  // data\n  let playerSelected = canvas.tokens.controlled[0].actor;\n  let playerDamageDice = playerSelected.data.data.attributes.damage.value;\n  let playerDamageMod = playerSelected.data.data.attributes.damage.misc;\n  let attribute;\n  let weaponTagDamage = tagCheckDamage(weapon);\n\n  attribute = attributeSelect(weapon, attributeChange, playerSelected);\n  \n  // Output\n  let msg = `<h2>${weapon.data.name}</h2>`;\n  msg+=`<p><b>Weapon Tags:</b> ${weapon.data.data.tagsString}</p>`;\n  if (attributeChange!='Default') { \n    msg+=`<p>Attribute used for the Move Roll is <b>${attributeChange}</b></p>`;\n  }\n  if (herculeanAppetites) { \n    dice = new Roll('1d6+1d8+' + attribute + '+' + move_mod).roll(); \n    msg+=herculeanAppetitesMesssage(dice); \n  } else {\n    dice = new Roll('2d6+' + attribute + '+' + move_mod).roll();\n  }\n  let outcome = successCheck(dice);\n\n  if (outcome==1) { // 6 or less - failure \n    msg+=`<h3 style=\"color:#b8950d\">You failed!</h3>`;\n    dice.toMessage({flavor: msg});  \n  } else if (outcome==2) { // 7-9 - partial success\n    let diceDamage = new Roll(playerDamageDice + '+' + weaponTagDamage + '+' + damage_mod).roll();\n    msg+=`<h3 style=\"color:#00009c\">Partial Success</h3>`    \n    if (backstab) { msg+= backStab(outcome); }\n    dice.toMessage({flavor: msg});                \n    diceDamage.toMessage({flavor: `<h3 style=\"color:#d40023\">Damage</h3>`});\n  } else if (outcome==3) { // 10+ - success\n    let diceDamage;    \n    diceDamage = new Roll(playerDamageDice + '+' + weaponTagDamage + '+' + damage_mod).roll();   \n    msg+=`<h3 style=\"color:#249c00\">Success</h3>`\n    msg+= exposeYourself();\n    if (backstab) { msg+= backStab(outcome); }\n    dice.toMessage({flavor: msg});                \n    diceDamage.toMessage({flavor: `<h3 style=\"color:#d40023\">Damage</h3>`});\n  }\n}\n\n// ==============================\n// Common Functions \n// ==============================\nfunction optionExist(val) {\n  if ( typeof(val) == 'undefined' ) {\n    return false;\n  } else {\n    return val.checked;\n  }\n}\n\nfunction tagCheckDamage(weapon) {\n  let tags = weapon.data.data.tagsString.split(',');\n  let tmp='';\n  let output = 0;\n  for (let i = 0; i < tags.length; i++) {\n    tmp = tags[i].trim();\n    if ( tmp.search(/damage/i)>-1 ) {      \n      output = parseInt(tmp.match(/\\d/i)[0]);\n    }\n  }\n  return output;\n}\n\nfunction tagCheckPrecise(weapon) {\n  let tags = weapon.data.data.tagsString.split(',');\n  let tmp='';\n  let output = false;\n  for (let i = 0; i < tags.length; i++) {\n    tmp = tags[i].trim();\n    if ( tmp.search(/precise/i)>-1 ) {      \n      output = true;\n    }\n  }\n  return output;\n}\n\nfunction attributeSelect(weapon, attributeChange, playerSelected) {  \n  if (attributeChange=='Default') { \n    if ( tagCheckPrecise(weapon) ) {\n      return parseInt(playerSelected.data.data.abilities.dex['mod']);\n    } else {\n      return parseInt(playerSelected.data.data.abilities.str['mod']);\n    }  \n  } else if (attributeChange=='Strength') {\n    return parseInt(playerSelected.data.data.abilities.str['mod']);\n  } else if (attributeChange=='Dexterity') {\n    return parseInt(playerSelected.data.data.abilities.dex['mod']);\n  } else if (attributeChange=='Constitution') {\n    return parseInt(playerSelected.data.data.abilities.con['mod']);\n  } else if (attributeChange=='Intelligence') {\n    return parseInt(playerSelected.data.data.abilities.int['mod']);\n  } else if (attributeChange=='Wisdom') {\n    return parseInt(playerSelected.data.data.abilities.wis['mod']);\n  } else if (attributeChange=='Charisma') {\n    return parseInt(playerSelected.data.data.abilities.cha['mod']);\n  }\n}\n\nfunction successCheck(dicePool) {  \n  let total = dicePool.total;\n  if (total>=7 && total<=9) {\n    return 2;\n  } else if (total>=10) {\n    return 3;\n  } else if (total<=6) {\n    return 1;\n  }\n}\n\nfunction moveSearch(moveName) {\n  return canvas.tokens.controlled[0].actor.items.filter(el => el.data.type == \"move\").filter(el => el.data.name == moveName);\n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { // Use Hook to add event to chat message html element\n        html[0].querySelector(element).addEventListener(event, func);        \n    });\n} // end addEventListenerOnHtmlElement\n   \n// ==============================\n// Extra Functions\n// ==============================\nfunction exposeYourself() {  \n  addEventListenerOnHtmlElement(\"#exposeYourselfButton\", 'click', (e) => {    \n    new Roll('1d6').roll().toMessage({flavor:`<h3 style=\"color:#d40023\">Expose Yourself Damage</h3>`});\n  });        \n  return `<button style=\"background:#d10000;color:white\" id=\"exposeYourselfButton\">Expose Yourself Damage</button>`;\n}\n   \n// ==============================\n// Class Functions\n// ==============================\nfunction herculeanAppetitesMesssage(dicePool) {\n  let temp = `<p><b>Herculean Appetites</b> used.</p>`;\n  if ( dicePool.dice[0].total > dicePool.dice[1].total ) { // d6>d8 \n    temp+=`<p><b>Herculean Appetites:</b> The GM will also introduce a <b style=\"color:#d40023\">complication or danger</b> that comes about due to your heedless pursuits.</p>`;\n  }\n  return temp;\n}\n\nfunction backStab(success) {  \n  addEventListenerOnHtmlElement(\"#backstabButton\", 'click', (e) => {    \n    new Roll('1d6').roll().toMessage({flavor:`<h3>Backstab Damage</h3>`});\n  });        \n  let tmp = ``;\n  if(success==2) {\n    tmp = `<h3>Choose one:</h3>`;\n  } else if(success==3) {\n    tmp = `<h3>Choose two:</h3>`;\n  }\n  return (tmp+`<ul>\n<li>You don&rsquo;t get into melee with them</li>\n<li>You deal your damage+1d6. [/roll 1d6] or [[/roll 1d6]] or [/r 1d6] or [[/r 1d6]]</li><button style=\"background:#d10000;color:white\" id=\"backstabButton\">Backstab Damage</button>\n<li>You create an advantage, +1 forward to you or an ally acting on it</li>\n<li>Reduce their armor by 1 until they repair it</li>\n</ul>`);   \n}\n\n\n/* test stuff\n  \n  console.log('----------------------------');\n  console.log(weapon);\n  console.log(playerSelected);\n  console.log(playerDamage);\n  console.log('----------------------------');\n\ncanvas.tokens.controlled[0].actor\ncanvas.tokens.controlled[0].actor.data.data.attributes.damage.value;\n\ncanvas.tokens.controlled[0].actor.items.filter(el => el.data.type == \"move\").filter(el => el.data.name == \"Backstab\");\n*/","author":"LS4QiTGkDELU8aif","img":"systems/dungeonworld/assets/icons/macros/Attack%20Assistant.svg","actorIds":[],"_id":"noKMJofITgfnNV2B"}
{"name":"Coin Manager","permission":{"default":0,"1naqx1UoDKZUy10j":3},"type":"script","flags":{"core":{"sourceId":"Macro.cpcGoFxJXqswibP9"}},"scope":"global","command":"const macroVersion = 'v0.1';\n/* Coin Manager\n## Features\n- Select a token and it'll be selected in the combo\n- Choose the amount of coins to give or to remove.\n- Send coins for everyone\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Dungeon%20World/Coin%20Manager.js\nicon: icons/commodities/currency/coins-plain-gold.webp\n*/\n\nmain();\n\nfunction main() {\n  let playersNames = game.actors.entities.filter((t) => t.data.type === \"character\").map((p=> p.data.name)); \n  let playerNameList;\n  let currentHeroPointsList = '';\n  let playerSelected;\n  if (actor) {   /* get selected token */\n    playerSelected = canvas.tokens.controlled[0].actor.name;        \n    playerNameList = `<option value=\"everyone\">Everyone</option>`;  \n  } else {\n    playerNameList = `<option value=\"everyone\" selected>Everyone</option>`;  \n  }    \n  playersNames.map((el) => {      \n    if (el===playerSelected) {\n      playerNameList += `<option value=\"${el}\" selected>${el}</option>`;\n    } else {\n      playerNameList += `<option value=\"${el}\">${el}</option>`;      \n    }    \n  });\n  \n  /* Show actual xp points*/\n  let currentHeroPoints = checkHeroCoin();\n  for (let i = 0; i < currentHeroPoints.length; i++) {\n    currentHeroPointsList += '<li><b>' + currentHeroPoints[i][0] + ':</b> ' + currentHeroPoints[i][1] + '</li>';\n  }  \n  \n  let template = `\n  <h2>Choose</h2>\n  <p><b>Hero:</b> <select id=\"playerName\" style=\"width: 200px\">${playerNameList}</select></p>\n  <p>\n    <b>How much coins do you want to give?</b> <input id=\"heroPoints\" type=\"number\" min=\"-10\" max=\"10\" style=\"width: 80px; box-sizing: border-box;border: none;background-color: #2d3748;color: white; text-align: center; \" value=1>\n  </p>    \n  <h2>Current Coins</h2>\n  <ul>\n    ${currentHeroPointsList}\n  </ul>\n  `;\n  \n  new Dialog({\n    title: `Coin Manager - ${macroVersion}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Apply\",\n        callback: async (html) => {\n          coinmanager(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\nasync function coinmanager(html){\n  let playerName = html.find(\"#playerName\")[0].value;\n  let heroPoints = html.find(\"#heroPoints\")[0].value;  \n  if (playerName=='everyone') {    \n    updateAllHerosXP(heroPoints);\n  } else { \n    updateHeroPoints(playerName, heroPoints);\n  }\n}\n\nasync function updateHeroPoints(playerName, heroPoints) {\n  let character = game.actors.entities.filter((t) => t.data.type === \"character\").filter((v) => v.data.name === playerName)[0];\n  let currentHeroPoints = parseInt( character.data.data.attributes.coin.value);\n  let total = currentHeroPoints + parseInt( heroPoints );\n  await character.update({['data.attributes.coin.value']: total});\n  expMessage(character, heroPoints);\n}\n\nfunction updateAllHerosXP(heroPoints) {\n  let players = game.actors.entities.filter((t) => t.data.type === \"character\");\n  players.map(async player => {    \n    let currentHeroPoints = parseInt( player.data.data.attributes.xp.value);\n    let total = currentHeroPoints + parseInt( heroPoints );\n    await player.update({['data.attributes.coin.value']: total});\n    expMessage(player, heroPoints);  \n  });\n}\n\nfunction checkHeroCoin() {\n  let heros = [];\n  let characters = game.actors.entities.filter((t) => t.data.type === \"character\");\n  characters.forEach( (c) => {\n    heros.push([c.data.name, c.data.data.attributes.coin.value]);\n  }); \n  return heros;\n}\n\nfunction expMessage(player, points) {\n  let message = `<h2>${player.data.name}</h2>`;  \n  let plural = 'coin';\n  if (parseInt(points)>1) {\n    plural='coins';\n  }\n  message += `\n  <div>\n    <img style=\"vertical-align:middle\" src=\"icons/commodities/currency/coins-plain-gold.webp\" width=\"32\" height=\"32\">  \n    <span>received <b>${points}</b> ${plural}.</</span>\n  </div>     \n  `;  \n  let chatData = {\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message    \n  };  \n  ChatMessage.create(chatData, {});\n}","author":"1naqx1UoDKZUy10j","img":"icons/commodities/currency/coins-plain-gold.webp","actorIds":[],"_id":"r7K8c402kcLZeVtM"}
